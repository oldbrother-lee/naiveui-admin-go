package main

import (
	"log"
	"recharge-go/internal/config"
	"recharge-go/internal/controller"
	"recharge-go/internal/repository"
	"recharge-go/internal/router"
	"recharge-go/internal/service"
	"recharge-go/internal/utils"
	"recharge-go/pkg/database"

	_ "recharge-go/docs" // docs is generated by Swag CLI, you have to import it.

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Recharge Go API
// @version 1.0
// @description This is a recharge system API server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1
// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	// Load configuration
	_, err := config.LoadConfig("configs/config.yaml")
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Initialize logger
	utils.InitLogger()

	// Initialize database
	if err := database.InitDB(); err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// Initialize repositories
	userRepo := repository.NewUserRepository(database.DB)
	permissionRepo := repository.NewPermissionRepository(database.DB)
	roleRepo := repository.NewRoleRepository(database.DB)
	productRepo := repository.NewProductRepository(database.DB)
	phoneLocationRepo := repository.NewPhoneLocationRepository(database.DB)
	productTypeRepo := repository.NewProductTypeRepository(database.DB)
	productTypeCateRepo := repository.NewProductTypeCategoryRepository(database.DB)
	platformRepo := repository.NewPlatformRepository(database.DB)
	platformAPIParamRepo := repository.NewPlatformAPIParamRepository(database.DB)

	// Initialize services
	userService := service.NewUserService(userRepo)
	permissionService := service.NewPermissionService(permissionRepo)
	roleService := service.NewRoleService(roleRepo)
	productService := service.NewProductService(productRepo)
	phoneLocationService := service.NewPhoneLocationService(phoneLocationRepo)
	productTypeService := service.NewProductTypeService(productTypeRepo, productTypeCateRepo)
	platformService := service.NewPlatformService(platformRepo)
	platformAPIParamService := service.NewPlatformAPIParamService(platformAPIParamRepo)

	// Initialize controllers
	userController := controller.NewUserController(userService)
	permissionController := controller.NewPermissionController(permissionService)
	roleController := controller.NewRoleController(roleService)
	productController := controller.NewProductController(productService)
	phoneLocationController := controller.NewPhoneLocationController(phoneLocationService)
	productTypeController := controller.NewProductTypeController(productTypeService)
	platformController := controller.NewPlatformController(platformService)
	platformAPIParamController := controller.NewPlatformAPIParamController(platformAPIParamService)

	// Setup router with dependencies
	r := router.SetupRouter(
		userController,
		permissionController,
		roleController,
		productController,
		userService,
		phoneLocationController,
		productTypeController,
		platformController,
		platformAPIParamController,
	)

	// Swagger
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Start server
	if err := r.Run(":8080"); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
