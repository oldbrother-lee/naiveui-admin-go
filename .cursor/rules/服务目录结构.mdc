---
description: 
globs: 
alwaysApply: true
---
# 服务目录结构说明

## 项目说明
本项目是使用 Go 语言重写 daichong1 项目的新版本实现。保持原有业务逻辑，同时利用 Go 语言的优势提升系统性能和可维护性。前端管理后台基于 Soybean Admin 开源项目开发。

## 标准目录结构
```
recharge-go/
├── api/                    # API 接口定义和协议文件
│   ├── http/              # HTTP API 定义
│   └── proto/             # gRPC 协议文件
├── cmd/                    # 主要应用程序入口
│   └── server/            # 服务器启动入口
├── config/                 # 配置文件目录
│   ├── dev/               # 开发环境配置
│   ├── test/              # 测试环境配置
│   └── prod/              # 生产环境配置
├── internal/              # 私有应用程序代码
│   ├── router/           # 路由配置
│   ├── controller/       # 请求控制器
│   ├── middleware/        # 中间件
│   ├── model/            # 数据模型
│   ├── repository/       # 数据访问层
│   ├── service/          # 业务逻辑层
│   └── utils/            # 内部工具函数
│       └── response.go   # 统一响应处理
├── pkg/                   # 可以被外部应用程序使用的库代码
│   ├── auth/             # 认证相关
│   ├── errors/           # 错误处理
│   └── utils/            # 通用工具
├── scripts/              # 脚本文件
│   ├── deploy/           # 部署脚本
│   └── migrations/       # 数据库迁移脚本
├── test/                 # 测试文件
│   ├── integration/      # 集成测试
│   └── mock/            # 模拟数据
├── web/                  # 前端管理后台
│   ├── src/             # 源代码目录
│   │   ├── api/        # 接口请求
│   │   ├── assets/     # 静态资源
│   │   ├── components/ # 全局组件
│   │   ├── config/     # 全局配置
│   │   ├── layouts/    # 布局组件
│   │   ├── router/     # 路由配置
│   │   ├── store/      # 状态管理
│   │   ├── styles/     # 全局样式
│   │   ├── utils/      # 工具函数
│   │   └── views/      # 页面组件
│   ├── .env            # 环境变量
│   └── package.json    # 项目依赖
├── .gitignore           # Git 忽略文件
├── Dockerfile           # Docker 构建文件
├── go.mod               # Go 模块定义
├── go.sum               # Go 模块依赖版本锁定
├── Makefile            # 项目管理命令
└── README.md           # 项目说明文档
```

## 关键目录说明
- `api/`: 定义所有对外提供的 API 接口
- `cmd/`: 包含服务的主入口点
- `internal/`: 存放不对外暴露的核心业务逻辑
  - `router/`: 路由注册和管理
  - `controller/`: HTTP 请求处理控制器
  - `service/`: 业务逻辑实现
  - `repository/`: 数据访问实现
  - `model/`: 数据模型定义
  - `middleware/`: HTTP 中间件
  - `utils/`: 项目内部使用的工具函数
    - `response.go`: 统一的响应处理工具
- `pkg/`: 可被其他服务复用的通用代码
- `web/`: 前端管理后台（基于 Soybean Admin）
  - `src/`: 前端源代码
  - 详细规范参考 [前端管理后台规范.mdc]

## 分层职责
### Repository 层
- 职责：实现所有数据库操作
- 原则：
  1. 只负责数据的 CRUD 操作
  2. 不包含业务逻辑
  3. 返回原始数据或错误
  4. 处理数据库事务
  5. 实现数据模型映射

### Service 层
- 职责：实现所有业务逻辑
- 原则：
  1. 调用 Repository 层获取数据
  2. 实现具体业务逻辑
  3. 处理业务异常
  4. 数据校验和转换
  5. 不直接操作数据库

### Controller 层
- 职责：处理 HTTP 请求
- 原则：
  1. 调用 Service 层处理业务
  2. 使用 response.go 统一格式化返回数据
  3. 处理请求参数验证
  4. 不包含业务逻辑

## 统一响应处理
`internal/utils/response.go` 用于统一处理所有接口返回，包含：
1. 统一的响应结构
2. 统一的错误码
3. 统一的成功/失败响应方法
4. 支持多语言错误信息

## 开发规范
1. 新增功能需要在对应目录下开发
2. 遵循 Go 项目标准布局
3. 配置文件按环境分离
4. 共享代码放在 `pkg` 目录
5. 业务代码放在 `internal` 目录
6. 路由注册统一在 `router` 目录管理
7. HTTP 请求处理逻辑在 `controller` 目录实现
8. 工具函数按照使用范围分别放在 `internal/utils` 或 `pkg/utils`
9. 所有数据库操作必须在 Repository 层实现
10. 所有业务逻辑必须在 Service 层实现
11. 所有接口返回必须使用 `response.go` 中的方法
12. Controller 层只能调用 Service 层，不能直接调用 Repository 层
13. 前端开发遵循 Soybean Admin 规范

## 注意事项
- 这是 daichong1 项目的 Go 语言重构版本
- 保持与原项目的业务逻辑一致性
- 重构时注重性能优化和代码可维护性
- 确保向后兼容性
- 路由管理集中化，便于权限控制和中间件配置
- 注意区分内部工具函数和可复用工具函数的放置位置
- 严格遵守分层架构，保持代码结构清晰
- 前后端分离开发，接口规范统一

## 语言规范
- 所有代码注释和文档使用中文
- 所有接口响应和错误信息使用中文
- 所有日志记录使用中文
- 所有与用户交互的提示信息使用中文
- 所有API文档使用中文
- 所有开发规范文档使用中文
